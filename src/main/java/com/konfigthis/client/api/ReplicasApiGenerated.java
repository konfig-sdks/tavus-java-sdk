/*
 * Tavus Developer API Collection
 * We're an AI video research company making personalized video possible at scale. Generate videos of yourself, and never record again! Available via web app & developer APIs.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ReplicasCreateNewReplicaRequest;
import com.konfigthis.client.model.ReplicasCreateNewReplicaResponse;
import com.konfigthis.client.model.ReplicasGetReplicaByIdResponse;
import com.konfigthis.client.model.ReplicasListResponse;
import com.konfigthis.client.model.ReplicasRenameReplicaByIdRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ReplicasApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReplicasApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ReplicasApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"x-api-key\" is required but no API key was provided. Please set \"x-api-key\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewReplicaCall(ReplicasCreateNewReplicaRequest replicasCreateNewReplicaRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = replicasCreateNewReplicaRequest;

        // create path and map variables
        String localVarPath = "/v2/replicas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewReplicaValidateBeforeCall(ReplicasCreateNewReplicaRequest replicasCreateNewReplicaRequest, final ApiCallback _callback) throws ApiException {
        return createNewReplicaCall(replicasCreateNewReplicaRequest, _callback);

    }


    private ApiResponse<ReplicasCreateNewReplicaResponse> createNewReplicaWithHttpInfo(ReplicasCreateNewReplicaRequest replicasCreateNewReplicaRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewReplicaValidateBeforeCall(replicasCreateNewReplicaRequest, null);
        Type localVarReturnType = new TypeToken<ReplicasCreateNewReplicaResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewReplicaAsync(ReplicasCreateNewReplicaRequest replicasCreateNewReplicaRequest, final ApiCallback<ReplicasCreateNewReplicaResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewReplicaValidateBeforeCall(replicasCreateNewReplicaRequest, _callback);
        Type localVarReturnType = new TypeToken<ReplicasCreateNewReplicaResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewReplicaRequestBuilder {
        private final String trainVideoUrl;
        private String callbackUrl;
        private String replicaName;

        private CreateNewReplicaRequestBuilder(String trainVideoUrl) {
            this.trainVideoUrl = trainVideoUrl;
        }

        /**
         * Set callbackUrl
         * @param callbackUrl A url that will receive a callback on completion of replica training or on error. (optional)
         * @return CreateNewReplicaRequestBuilder
         */
        public CreateNewReplicaRequestBuilder callbackUrl(String callbackUrl) {
            this.callbackUrl = callbackUrl;
            return this;
        }
        
        /**
         * Set replicaName
         * @param replicaName A name for the replica. (optional)
         * @return CreateNewReplicaRequestBuilder
         */
        public CreateNewReplicaRequestBuilder replicaName(String replicaName) {
            this.replicaName = replicaName;
            return this;
        }
        
        /**
         * Build call for createNewReplica
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ReplicasCreateNewReplicaRequest replicasCreateNewReplicaRequest = buildBodyParams();
            return createNewReplicaCall(replicasCreateNewReplicaRequest, _callback);
        }

        private ReplicasCreateNewReplicaRequest buildBodyParams() {
            ReplicasCreateNewReplicaRequest replicasCreateNewReplicaRequest = new ReplicasCreateNewReplicaRequest();
            replicasCreateNewReplicaRequest.callbackUrl(this.callbackUrl);
            replicasCreateNewReplicaRequest.replicaName(this.replicaName);
            replicasCreateNewReplicaRequest.trainVideoUrl(this.trainVideoUrl);
            return replicasCreateNewReplicaRequest;
        }

        /**
         * Execute createNewReplica request
         * @return ReplicasCreateNewReplicaResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ReplicasCreateNewReplicaResponse execute() throws ApiException {
            ReplicasCreateNewReplicaRequest replicasCreateNewReplicaRequest = buildBodyParams();
            ApiResponse<ReplicasCreateNewReplicaResponse> localVarResp = createNewReplicaWithHttpInfo(replicasCreateNewReplicaRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewReplica request with HTTP info returned
         * @return ApiResponse&lt;ReplicasCreateNewReplicaResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReplicasCreateNewReplicaResponse> executeWithHttpInfo() throws ApiException {
            ReplicasCreateNewReplicaRequest replicasCreateNewReplicaRequest = buildBodyParams();
            return createNewReplicaWithHttpInfo(replicasCreateNewReplicaRequest);
        }

        /**
         * Execute createNewReplica request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReplicasCreateNewReplicaResponse> _callback) throws ApiException {
            ReplicasCreateNewReplicaRequest replicasCreateNewReplicaRequest = buildBodyParams();
            return createNewReplicaAsync(replicasCreateNewReplicaRequest, _callback);
        }
    }

    /**
     * Create Replica
     * This endpoint creates a new Replica that can be used to generate personalized videos.   The only required body parameter is &#x60;train_video_url&#x60;. This url must be a download link such as a presigned S3 url. Please ensure you pass in a video that meets the [requirements](https://docs.tavusapi.com/api-reference) for training.  Replica training will fail without the following consent statement being present at the beginning of the video: &gt; I, [FULL NAME], am currently speaking and consent Tavus to create an AI clone of me by using the audio and video samples I provide. I understand that this AI clone can be used to create videos that look and sound like me.  Learn more about the consent statement [here](https://docs.tavusapi.com/api-reference).  Learn more about training a personal Replica [here](https://docs.tavusapi.com/api-reference). 
     * @return CreateNewReplicaRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewReplicaRequestBuilder createNewReplica(String trainVideoUrl) throws IllegalArgumentException {
        if (trainVideoUrl == null) throw new IllegalArgumentException("\"trainVideoUrl\" is required but got null");
            

        return new CreateNewReplicaRequestBuilder(trainVideoUrl);
    }
    private okhttp3.Call deleteByReplicaIdCall(String replicaId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/replicas/{replica_id}"
            .replace("{" + "replica_id" + "}", localVarApiClient.escapeString(replicaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByReplicaIdValidateBeforeCall(String replicaId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'replicaId' is set
        if (replicaId == null) {
            throw new ApiException("Missing the required parameter 'replicaId' when calling deleteByReplicaId(Async)");
        }

        return deleteByReplicaIdCall(replicaId, _callback);

    }


    private ApiResponse<Void> deleteByReplicaIdWithHttpInfo(String replicaId) throws ApiException {
        okhttp3.Call localVarCall = deleteByReplicaIdValidateBeforeCall(replicaId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteByReplicaIdAsync(String replicaId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByReplicaIdValidateBeforeCall(replicaId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteByReplicaIdRequestBuilder {
        private final String replicaId;

        private DeleteByReplicaIdRequestBuilder(String replicaId) {
            this.replicaId = replicaId;
        }

        /**
         * Build call for deleteByReplicaId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByReplicaIdCall(replicaId, _callback);
        }


        /**
         * Execute deleteByReplicaId request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteByReplicaIdWithHttpInfo(replicaId);
        }

        /**
         * Execute deleteByReplicaId request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteByReplicaIdWithHttpInfo(replicaId);
        }

        /**
         * Execute deleteByReplicaId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteByReplicaIdAsync(replicaId, _callback);
        }
    }

    /**
     * Delete Replica
     * This endpoint deletes a single Replica by its unique identifier. Once deleted, this Replica can not be used to generate videos. 
     * @param replicaId  (required)
     * @return DeleteByReplicaIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteByReplicaIdRequestBuilder deleteByReplicaId(String replicaId) throws IllegalArgumentException {
        if (replicaId == null) throw new IllegalArgumentException("\"replicaId\" is required but got null");
            

        return new DeleteByReplicaIdRequestBuilder(replicaId);
    }
    private okhttp3.Call getReplicaByIdCall(String replicaId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/replicas/{replica_id}"
            .replace("{" + "replica_id" + "}", localVarApiClient.escapeString(replicaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReplicaByIdValidateBeforeCall(String replicaId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'replicaId' is set
        if (replicaId == null) {
            throw new ApiException("Missing the required parameter 'replicaId' when calling getReplicaById(Async)");
        }

        return getReplicaByIdCall(replicaId, _callback);

    }


    private ApiResponse<ReplicasGetReplicaByIdResponse> getReplicaByIdWithHttpInfo(String replicaId) throws ApiException {
        okhttp3.Call localVarCall = getReplicaByIdValidateBeforeCall(replicaId, null);
        Type localVarReturnType = new TypeToken<ReplicasGetReplicaByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getReplicaByIdAsync(String replicaId, final ApiCallback<ReplicasGetReplicaByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReplicaByIdValidateBeforeCall(replicaId, _callback);
        Type localVarReturnType = new TypeToken<ReplicasGetReplicaByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetReplicaByIdRequestBuilder {
        private final String replicaId;

        private GetReplicaByIdRequestBuilder(String replicaId) {
            this.replicaId = replicaId;
        }

        /**
         * Build call for getReplicaById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getReplicaByIdCall(replicaId, _callback);
        }


        /**
         * Execute getReplicaById request
         * @return ReplicasGetReplicaByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ReplicasGetReplicaByIdResponse execute() throws ApiException {
            ApiResponse<ReplicasGetReplicaByIdResponse> localVarResp = getReplicaByIdWithHttpInfo(replicaId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getReplicaById request with HTTP info returned
         * @return ApiResponse&lt;ReplicasGetReplicaByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReplicasGetReplicaByIdResponse> executeWithHttpInfo() throws ApiException {
            return getReplicaByIdWithHttpInfo(replicaId);
        }

        /**
         * Execute getReplicaById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReplicasGetReplicaByIdResponse> _callback) throws ApiException {
            return getReplicaByIdAsync(replicaId, _callback);
        }
    }

    /**
     * Get Replica
     * This endpoint returns a single Replica by its unique identifier.   Included in the response body is a &#x60;training_progress&#x60; string that represents the progress of the Replica training. If there are any errors during training, the &#x60;status&#x60; will be &#x60;error&#x60; and the &#x60;error_message&#x60; will be populated. 
     * @param replicaId  (required)
     * @return GetReplicaByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetReplicaByIdRequestBuilder getReplicaById(String replicaId) throws IllegalArgumentException {
        if (replicaId == null) throw new IllegalArgumentException("\"replicaId\" is required but got null");
            

        return new GetReplicaByIdRequestBuilder(replicaId);
    }
    private okhttp3.Call listCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/replicas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listCall(_callback);

    }


    private ApiResponse<ReplicasListResponse> listWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ReplicasListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(final ApiCallback<ReplicasListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ReplicasListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {

        private ListRequestBuilder() {
        }

        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(_callback);
        }


        /**
         * Execute list request
         * @return ReplicasListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ReplicasListResponse execute() throws ApiException {
            ApiResponse<ReplicasListResponse> localVarResp = listWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;ReplicasListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReplicasListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo();
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReplicasListResponse> _callback) throws ApiException {
            return listAsync(_callback);
        }
    }

    /**
     * List Replicas
     * This endpoint returns a list of all replicas that have been created by the API Key in use. In the response, a root level &#x60;data&#x60; key will contain the list of Replicas. 
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call renameReplicaByIdCall(String replicaId, ReplicasRenameReplicaByIdRequest replicasRenameReplicaByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = replicasRenameReplicaByIdRequest;

        // create path and map variables
        String localVarPath = "/v2/replicas/{replica_id}/name"
            .replace("{" + "replica_id" + "}", localVarApiClient.escapeString(replicaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renameReplicaByIdValidateBeforeCall(String replicaId, ReplicasRenameReplicaByIdRequest replicasRenameReplicaByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'replicaId' is set
        if (replicaId == null) {
            throw new ApiException("Missing the required parameter 'replicaId' when calling renameReplicaById(Async)");
        }

        return renameReplicaByIdCall(replicaId, replicasRenameReplicaByIdRequest, _callback);

    }


    private ApiResponse<Void> renameReplicaByIdWithHttpInfo(String replicaId, ReplicasRenameReplicaByIdRequest replicasRenameReplicaByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = renameReplicaByIdValidateBeforeCall(replicaId, replicasRenameReplicaByIdRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call renameReplicaByIdAsync(String replicaId, ReplicasRenameReplicaByIdRequest replicasRenameReplicaByIdRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = renameReplicaByIdValidateBeforeCall(replicaId, replicasRenameReplicaByIdRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RenameReplicaByIdRequestBuilder {
        private final String replicaName;
        private final String replicaId;

        private RenameReplicaByIdRequestBuilder(String replicaName, String replicaId) {
            this.replicaName = replicaName;
            this.replicaId = replicaId;
        }

        /**
         * Build call for renameReplicaById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ReplicasRenameReplicaByIdRequest replicasRenameReplicaByIdRequest = buildBodyParams();
            return renameReplicaByIdCall(replicaId, replicasRenameReplicaByIdRequest, _callback);
        }

        private ReplicasRenameReplicaByIdRequest buildBodyParams() {
            ReplicasRenameReplicaByIdRequest replicasRenameReplicaByIdRequest = new ReplicasRenameReplicaByIdRequest();
            replicasRenameReplicaByIdRequest.replicaName(this.replicaName);
            return replicasRenameReplicaByIdRequest;
        }

        /**
         * Execute renameReplicaById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ReplicasRenameReplicaByIdRequest replicasRenameReplicaByIdRequest = buildBodyParams();
            renameReplicaByIdWithHttpInfo(replicaId, replicasRenameReplicaByIdRequest);
        }

        /**
         * Execute renameReplicaById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ReplicasRenameReplicaByIdRequest replicasRenameReplicaByIdRequest = buildBodyParams();
            return renameReplicaByIdWithHttpInfo(replicaId, replicasRenameReplicaByIdRequest);
        }

        /**
         * Execute renameReplicaById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ReplicasRenameReplicaByIdRequest replicasRenameReplicaByIdRequest = buildBodyParams();
            return renameReplicaByIdAsync(replicaId, replicasRenameReplicaByIdRequest, _callback);
        }
    }

    /**
     * Rename Replica
     * This endpoint renames a single Replica by its unique identifier.  
     * @param replicaId  (required)
     * @return RenameReplicaByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RenameReplicaByIdRequestBuilder renameReplicaById(String replicaName, String replicaId) throws IllegalArgumentException {
        if (replicaName == null) throw new IllegalArgumentException("\"replicaName\" is required but got null");
            

        if (replicaId == null) throw new IllegalArgumentException("\"replicaId\" is required but got null");
            

        return new RenameReplicaByIdRequestBuilder(replicaName, replicaId);
    }
}
