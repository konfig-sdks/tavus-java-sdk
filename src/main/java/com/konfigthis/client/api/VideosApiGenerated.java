/*
 * Tavus Developer API Collection
 * We're an AI video research company making personalized video possible at scale. Generate videos of yourself, and never record again! Available via web app & developer APIs.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.VideosCreateVideoFromReplicaAndScriptRequest;
import com.konfigthis.client.model.VideosCreateVideoFromReplicaAndScriptResponse;
import com.konfigthis.client.model.VideosGetAllResponse;
import com.konfigthis.client.model.VideosGetByVideoIdResponse;
import com.konfigthis.client.model.VideosUpdateNameRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class VideosApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VideosApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public VideosApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"x-api-key\" is required but no API key was provided. Please set \"x-api-key\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createVideoFromReplicaAndScriptCall(VideosCreateVideoFromReplicaAndScriptRequest videosCreateVideoFromReplicaAndScriptRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = videosCreateVideoFromReplicaAndScriptRequest;

        // create path and map variables
        String localVarPath = "/v2/videos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVideoFromReplicaAndScriptValidateBeforeCall(VideosCreateVideoFromReplicaAndScriptRequest videosCreateVideoFromReplicaAndScriptRequest, final ApiCallback _callback) throws ApiException {
        return createVideoFromReplicaAndScriptCall(videosCreateVideoFromReplicaAndScriptRequest, _callback);

    }


    private ApiResponse<VideosCreateVideoFromReplicaAndScriptResponse> createVideoFromReplicaAndScriptWithHttpInfo(VideosCreateVideoFromReplicaAndScriptRequest videosCreateVideoFromReplicaAndScriptRequest) throws ApiException {
        okhttp3.Call localVarCall = createVideoFromReplicaAndScriptValidateBeforeCall(videosCreateVideoFromReplicaAndScriptRequest, null);
        Type localVarReturnType = new TypeToken<VideosCreateVideoFromReplicaAndScriptResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createVideoFromReplicaAndScriptAsync(VideosCreateVideoFromReplicaAndScriptRequest videosCreateVideoFromReplicaAndScriptRequest, final ApiCallback<VideosCreateVideoFromReplicaAndScriptResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVideoFromReplicaAndScriptValidateBeforeCall(videosCreateVideoFromReplicaAndScriptRequest, _callback);
        Type localVarReturnType = new TypeToken<VideosCreateVideoFromReplicaAndScriptResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateVideoFromReplicaAndScriptRequestBuilder {
        private final String replicaId;
        private final String script;
        private String backgroundSourceUrl;
        private String backgroundUrl;
        private String videoName;

        private CreateVideoFromReplicaAndScriptRequestBuilder(String replicaId, String script) {
            this.replicaId = replicaId;
            this.script = script;
        }

        /**
         * Set backgroundSourceUrl
         * @param backgroundSourceUrl A direct link to a video that is publicly accessible via a storage location such as an S3 bucket. This will be used as the background for the video. The video must be publicly accessible. (optional)
         * @return CreateVideoFromReplicaAndScriptRequestBuilder
         */
        public CreateVideoFromReplicaAndScriptRequestBuilder backgroundSourceUrl(String backgroundSourceUrl) {
            this.backgroundSourceUrl = backgroundSourceUrl;
            return this;
        }
        
        /**
         * Set backgroundUrl
         * @param backgroundUrl A link to a website. This will be used as the background for the video. The website must be publicly accessible and properly formed. (optional)
         * @return CreateVideoFromReplicaAndScriptRequestBuilder
         */
        public CreateVideoFromReplicaAndScriptRequestBuilder backgroundUrl(String backgroundUrl) {
            this.backgroundUrl = backgroundUrl;
            return this;
        }
        
        /**
         * Set videoName
         * @param videoName A name for the video. (optional)
         * @return CreateVideoFromReplicaAndScriptRequestBuilder
         */
        public CreateVideoFromReplicaAndScriptRequestBuilder videoName(String videoName) {
            this.videoName = videoName;
            return this;
        }
        
        /**
         * Build call for createVideoFromReplicaAndScript
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VideosCreateVideoFromReplicaAndScriptRequest videosCreateVideoFromReplicaAndScriptRequest = buildBodyParams();
            return createVideoFromReplicaAndScriptCall(videosCreateVideoFromReplicaAndScriptRequest, _callback);
        }

        private VideosCreateVideoFromReplicaAndScriptRequest buildBodyParams() {
            VideosCreateVideoFromReplicaAndScriptRequest videosCreateVideoFromReplicaAndScriptRequest = new VideosCreateVideoFromReplicaAndScriptRequest();
            videosCreateVideoFromReplicaAndScriptRequest.backgroundSourceUrl(this.backgroundSourceUrl);
            videosCreateVideoFromReplicaAndScriptRequest.backgroundUrl(this.backgroundUrl);
            videosCreateVideoFromReplicaAndScriptRequest.replicaId(this.replicaId);
            videosCreateVideoFromReplicaAndScriptRequest.script(this.script);
            videosCreateVideoFromReplicaAndScriptRequest.videoName(this.videoName);
            return videosCreateVideoFromReplicaAndScriptRequest;
        }

        /**
         * Execute createVideoFromReplicaAndScript request
         * @return VideosCreateVideoFromReplicaAndScriptResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public VideosCreateVideoFromReplicaAndScriptResponse execute() throws ApiException {
            VideosCreateVideoFromReplicaAndScriptRequest videosCreateVideoFromReplicaAndScriptRequest = buildBodyParams();
            ApiResponse<VideosCreateVideoFromReplicaAndScriptResponse> localVarResp = createVideoFromReplicaAndScriptWithHttpInfo(videosCreateVideoFromReplicaAndScriptRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createVideoFromReplicaAndScript request with HTTP info returned
         * @return ApiResponse&lt;VideosCreateVideoFromReplicaAndScriptResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VideosCreateVideoFromReplicaAndScriptResponse> executeWithHttpInfo() throws ApiException {
            VideosCreateVideoFromReplicaAndScriptRequest videosCreateVideoFromReplicaAndScriptRequest = buildBodyParams();
            return createVideoFromReplicaAndScriptWithHttpInfo(videosCreateVideoFromReplicaAndScriptRequest);
        }

        /**
         * Execute createVideoFromReplicaAndScript request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VideosCreateVideoFromReplicaAndScriptResponse> _callback) throws ApiException {
            VideosCreateVideoFromReplicaAndScriptRequest videosCreateVideoFromReplicaAndScriptRequest = buildBodyParams();
            return createVideoFromReplicaAndScriptAsync(videosCreateVideoFromReplicaAndScriptRequest, _callback);
        }
    }

    /**
     * Generate Video
     * This endpoint generates a new video using a Replica and a script.   The only required body parameters are &#x60;replica_id&#x60; and &#x60;script&#x60;. The &#x60;replica_id&#x60; is a unique identifier for the Replica that will be used to generate the video. The &#x60;script&#x60; is the text that will be spoken by the Replica in the video.  If a &#x60;background_url&#x60; is provided, Tavus will record a video of the website and use it as the background for the video. If a &#x60;background_source_url&#x60; is provided, where the URL points to a download link such as a presigned S3 URL, Tavus will use the video as the background for the video. If neither are provided, the video will consist of a full screen Replica.  To learn more about generating videos with Replicas, see [here](https://docs.tavusapi.com/api-reference).  To learn more about writing an effective script for your video, see [Scripting prompting](https://docs.tavusapi.com/api-reference). 
     * @return CreateVideoFromReplicaAndScriptRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateVideoFromReplicaAndScriptRequestBuilder createVideoFromReplicaAndScript(String replicaId, String script) throws IllegalArgumentException {
        if (replicaId == null) throw new IllegalArgumentException("\"replicaId\" is required but got null");
            

        if (script == null) throw new IllegalArgumentException("\"script\" is required but got null");
            

        return new CreateVideoFromReplicaAndScriptRequestBuilder(replicaId, script);
    }
    private okhttp3.Call deleteByVideoIdCall(String videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos/{video_id}"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByVideoIdValidateBeforeCall(String videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling deleteByVideoId(Async)");
        }

        return deleteByVideoIdCall(videoId, _callback);

    }


    private ApiResponse<Void> deleteByVideoIdWithHttpInfo(String videoId) throws ApiException {
        okhttp3.Call localVarCall = deleteByVideoIdValidateBeforeCall(videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteByVideoIdAsync(String videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByVideoIdValidateBeforeCall(videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteByVideoIdRequestBuilder {
        private final String videoId;

        private DeleteByVideoIdRequestBuilder(String videoId) {
            this.videoId = videoId;
        }

        /**
         * Build call for deleteByVideoId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByVideoIdCall(videoId, _callback);
        }


        /**
         * Execute deleteByVideoId request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteByVideoIdWithHttpInfo(videoId);
        }

        /**
         * Execute deleteByVideoId request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteByVideoIdWithHttpInfo(videoId);
        }

        /**
         * Execute deleteByVideoId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteByVideoIdAsync(videoId, _callback);
        }
    }

    /**
     * Delete Video
     * This endpoint deletes a single video by its unique identifier. 
     * @param videoId  (required)
     * @return DeleteByVideoIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteByVideoIdRequestBuilder deleteByVideoId(String videoId) throws IllegalArgumentException {
        if (videoId == null) throw new IllegalArgumentException("\"videoId\" is required but got null");
            

        return new DeleteByVideoIdRequestBuilder(videoId);
    }
    private okhttp3.Call getAllCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllCall(_callback);

    }


    private ApiResponse<VideosGetAllResponse> getAllWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<VideosGetAllResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(final ApiCallback<VideosGetAllResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<VideosGetAllResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {

        private GetAllRequestBuilder() {
        }

        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(_callback);
        }


        /**
         * Execute getAll request
         * @return VideosGetAllResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public VideosGetAllResponse execute() throws ApiException {
            ApiResponse<VideosGetAllResponse> localVarResp = getAllWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;VideosGetAllResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VideosGetAllResponse> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo();
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VideosGetAllResponse> _callback) throws ApiException {
            return getAllAsync(_callback);
        }
    }

    /**
     * List Videos
     * This endpoint returns a list of all videos that have been generated by the API Key in use.  
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll() throws IllegalArgumentException {
        return new GetAllRequestBuilder();
    }
    private okhttp3.Call getByVideoIdCall(String videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos/{video_id}"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByVideoIdValidateBeforeCall(String videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getByVideoId(Async)");
        }

        return getByVideoIdCall(videoId, _callback);

    }


    private ApiResponse<VideosGetByVideoIdResponse> getByVideoIdWithHttpInfo(String videoId) throws ApiException {
        okhttp3.Call localVarCall = getByVideoIdValidateBeforeCall(videoId, null);
        Type localVarReturnType = new TypeToken<VideosGetByVideoIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByVideoIdAsync(String videoId, final ApiCallback<VideosGetByVideoIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByVideoIdValidateBeforeCall(videoId, _callback);
        Type localVarReturnType = new TypeToken<VideosGetByVideoIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByVideoIdRequestBuilder {
        private final String videoId;

        private GetByVideoIdRequestBuilder(String videoId) {
            this.videoId = videoId;
        }

        /**
         * Build call for getByVideoId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByVideoIdCall(videoId, _callback);
        }


        /**
         * Execute getByVideoId request
         * @return VideosGetByVideoIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public VideosGetByVideoIdResponse execute() throws ApiException {
            ApiResponse<VideosGetByVideoIdResponse> localVarResp = getByVideoIdWithHttpInfo(videoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByVideoId request with HTTP info returned
         * @return ApiResponse&lt;VideosGetByVideoIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VideosGetByVideoIdResponse> executeWithHttpInfo() throws ApiException {
            return getByVideoIdWithHttpInfo(videoId);
        }

        /**
         * Execute getByVideoId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VideosGetByVideoIdResponse> _callback) throws ApiException {
            return getByVideoIdAsync(videoId, _callback);
        }
    }

    /**
     * Get Video
     * This endpoint returns a single video by its unique identifier.   The response body will contain a &#x60;status&#x60; string that represents the status of the video. If the video is ready, the response body will also contain a &#x60;download_url&#x60;, &#x60;stream_url&#x60;, and &#x60;hosted_url&#x60; that can be used to download, stream, and view the video respectively. 
     * @param videoId  (required)
     * @return GetByVideoIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetByVideoIdRequestBuilder getByVideoId(String videoId) throws IllegalArgumentException {
        if (videoId == null) throw new IllegalArgumentException("\"videoId\" is required but got null");
            

        return new GetByVideoIdRequestBuilder(videoId);
    }
    private okhttp3.Call updateNameCall(String videoId, VideosUpdateNameRequest videosUpdateNameRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = videosUpdateNameRequest;

        // create path and map variables
        String localVarPath = "/v2/videos/{video_id}/name"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNameValidateBeforeCall(String videoId, VideosUpdateNameRequest videosUpdateNameRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling updateName(Async)");
        }

        return updateNameCall(videoId, videosUpdateNameRequest, _callback);

    }


    private ApiResponse<Void> updateNameWithHttpInfo(String videoId, VideosUpdateNameRequest videosUpdateNameRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNameValidateBeforeCall(videoId, videosUpdateNameRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateNameAsync(String videoId, VideosUpdateNameRequest videosUpdateNameRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNameValidateBeforeCall(videoId, videosUpdateNameRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateNameRequestBuilder {
        private final String videoName;
        private final String videoId;

        private UpdateNameRequestBuilder(String videoName, String videoId) {
            this.videoName = videoName;
            this.videoId = videoId;
        }

        /**
         * Build call for updateName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VideosUpdateNameRequest videosUpdateNameRequest = buildBodyParams();
            return updateNameCall(videoId, videosUpdateNameRequest, _callback);
        }

        private VideosUpdateNameRequest buildBodyParams() {
            VideosUpdateNameRequest videosUpdateNameRequest = new VideosUpdateNameRequest();
            videosUpdateNameRequest.videoName(this.videoName);
            return videosUpdateNameRequest;
        }

        /**
         * Execute updateName request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            VideosUpdateNameRequest videosUpdateNameRequest = buildBodyParams();
            updateNameWithHttpInfo(videoId, videosUpdateNameRequest);
        }

        /**
         * Execute updateName request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            VideosUpdateNameRequest videosUpdateNameRequest = buildBodyParams();
            return updateNameWithHttpInfo(videoId, videosUpdateNameRequest);
        }

        /**
         * Execute updateName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            VideosUpdateNameRequest videosUpdateNameRequest = buildBodyParams();
            return updateNameAsync(videoId, videosUpdateNameRequest, _callback);
        }
    }

    /**
     * Rename Video
     * This endpoint renames a single video by its unique identifier. 
     * @param videoId  (required)
     * @return UpdateNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateNameRequestBuilder updateName(String videoName, String videoId) throws IllegalArgumentException {
        if (videoName == null) throw new IllegalArgumentException("\"videoName\" is required but got null");
            

        if (videoId == null) throw new IllegalArgumentException("\"videoId\" is required but got null");
            

        return new UpdateNameRequestBuilder(videoName, videoId);
    }
}
